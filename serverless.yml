service: ethiopia-covid-19-gateway

frameworkVersion: '>=1.1.0 <2.0.0'

plugins:
  - serverless-domain-manager
  - serverless-offline

provider:
  name: aws
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: ${opt:region, 'us-east-2'} # Overwrite the default region used. Default is us-east-1
  runtime: nodejs12.x
  environment:
    AUTH_ISS: ${cf:api-gateway-cognito.ProviderURL}
    DOMAIN_NAME: ethiopia-covid19.com
    DOCUMENT_DB_URL: ${env:LOCAL_DB_URL, 'mongodb://covidResponse:covidResponse@docdb-naods-cluster-01.cluster-cc9aixc24mlt.us-east-2.docdb.amazonaws.com:27017/covidResponse?replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false'}
    VPC_SECURITY_GROUP_1: sg-3e5c8f59
    VPC_SUBNET_GROUP_1: subnet-90840ddc
    VPC_SUBNET_GROUP_2: subnet-1d93b567
    VPC_SUBNET_GROUP_3: subnet-f569819e

functions:
  auth:
    handler: handlers/auth.authorize

  public-create:
    handler: handlers/public.create
    vpc:
      securityGroupIds:
        - ${self:provider.environment.VPC_SECURITY_GROUP_1}
      subnetIds:
        - ${self:provider.environment.VPC_SUBNET_GROUP_1}
        - ${self:provider.environment.VPC_SUBNET_GROUP_2}
        - ${self:provider.environment.VPC_SUBNET_GROUP_3}
    events:
      - http:
          path: gateway/community-report
          method: post

  create:
    handler: handlers/create.create
    vpc:
      securityGroupIds:
        - ${self:provider.environment.VPC_SECURITY_GROUP_1}
      subnetIds:
        - ${self:provider.environment.VPC_SUBNET_GROUP_1}
        - ${self:provider.environment.VPC_SUBNET_GROUP_2}
        - ${self:provider.environment.VPC_SUBNET_GROUP_3}
    events:
      - http:
          path: gateway/{type}
          method: post
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true

  list:
    handler: handlers/list.list
    vpc:
      securityGroupIds:
        - ${self:provider.environment.VPC_SECURITY_GROUP_1}
      subnetIds:
        - ${self:provider.environment.VPC_SUBNET_GROUP_1}
        - ${self:provider.environment.VPC_SUBNET_GROUP_2}
        - ${self:provider.environment.VPC_SUBNET_GROUP_3}
    events:
      - http:
          path: gateway/{type}
          method: get
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true

  get:
    handler: handlers/get.get
    vpc:
      securityGroupIds:
        - ${self:provider.environment.VPC_SECURITY_GROUP_1}
      subnetIds:
        - ${self:provider.environment.VPC_SUBNET_GROUP_1}
        - ${self:provider.environment.VPC_SUBNET_GROUP_2}
        - ${self:provider.environment.VPC_SUBNET_GROUP_3}
    events:
      - http:
          path: gateway/{type}/{id}
          method: get
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true
                id: true

  update:
    handler: handlers/update.update
    vpc:
      securityGroupIds:
        - ${self:provider.environment.VPC_SECURITY_GROUP_1}
      subnetIds:
        - ${self:provider.environment.VPC_SUBNET_GROUP_1}
        - ${self:provider.environment.VPC_SUBNET_GROUP_2}
        - ${self:provider.environment.VPC_SUBNET_GROUP_3}
    events:
      - http:
          path: gateway/{type}/{id}
          method: put
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true
                id: true

  # delete:
  #   handler: handlers/delete.delete
  #   vpc:
  #     securityGroupIds:
  #       - ${self:provider.environment.VPC_SECURITY_GROUP_1}
  #     subnetIds:
  #       - ${self:provider.environment.VPC_SUBNET_GROUP_1}
  #       - ${self:provider.environment.VPC_SUBNET_GROUP_2}
  #       - ${self:provider.environment.VPC_SUBNET_GROUP_3}
  #   events:
  #     - http:
  #         path: gateway/{type}/{id}
  #         method: delete
  #         authorizer: auth
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               type: true
  #               id: true

custom:
  # Adds the Custom DNS Name for API Gateway
  customDomain:
    domainName: 'api.${self:provider.environment.DOMAIN_NAME}'
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: '*.${self:provider.environment.DOMAIN_NAME}'
    createRoute53Record: false
