service: ethiopia-covid-19-gateway

frameworkVersion: '>=1.1.0 <2.0.0'

plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: ${opt:region, 'us-east-2'} # Overwrite the default region used. Default is us-east-1
  runtime: nodejs12.x
  environment:
    # cf:stackName.outputKey
    COMMUNITY_TABLE: ${cf:api-gateway-cognito.api-gateway-${opt:stage}-CommunityReportsTable, 'CommunityReportsTable'}
    PASSENGERS_TABLE: ${cf:api-gateway-cognito.api-gateway-${opt:stage}-PassengerReportsTable, 'PassengerReportsTable'}
    MEDICAL_FACILITY_TABLE: ${cf:api-gateway-cognito.api-gateway-${opt:stage}-MedicalFacilityReportsTable, 'MedicalFacilityReportsTable'}
    SURVEILLANCE_TABLE: ${cf:api-gateway-cognito.api-gateway-${opt:stage}-SurveillanceReportsTable, 'SurveillanceReportsTable'}
    TOLL_FREE_TABLE: ${cf:api-gateway-cognito.api-gateway-${opt:stage}-TollFreeReportsTable, 'TollFreeReportsTable'}
    AUTH_ISS: ${cf:api-gateway-cognito.${opt:stage}-oauth-token-url, 'AUTH_ISS_DEFAULT'}
    DOMAIN_NAME: ethiopia-covid19.com

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMUNITY_TABLE}'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PASSENGERS_TABLE}'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MEDICAL_FACILITY_TABLE}'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SURVEILLANCE_TABLE}'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TOLL_FREE_TABLE}'

functions:
  auth:
    handler: handlers/auth.authorize

  public-create:
    handler: handlers/public.create
    events:
      - http:
          path: gateway/community-report
          method: post

  create:
    handler: handlers/create.create
    events:
      - http:
          path: gateway/{type}
          method: post
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true

  list:
    handler: handlers/list.list
    events:
      - http:
          path: gateway/{type}
          method: get
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true

  get:
    handler: handlers/get.get
    events:
      - http:
          path: gateway/{type}/{id}
          method: get
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true
                id: true

  update:
    handler: handlers/update.update
    events:
      - http:
          path: gateway/{type}/{id}
          method: put
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true
                id: true

  delete:
    handler: handlers/delete.delete
    events:
      - http:
          path: gateway/{type}/{id}
          method: delete
          authorizer: auth
          cors: true
          request:
            parameters:
              paths:
                type: true
                id: true

custom:
  # Adds the Custom DNS Name for API Gateway
  customDomain:
    domainName: 'api.${self:provider.environment.DOMAIN_NAME}'
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: '*.${self:provider.environment.DOMAIN_NAME}'
    createRoute53Record: false

  # Sets up local version of dynamodb for testing
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

resources:
  ${file(./dynamodb.yml)}
